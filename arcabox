#!/bin/bash
set -e

RED='\033[0;31m' 
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET='\033[0m'  
BOLD='\033[1m'   
UNDERLINE='\033[4m'
if [ "$(id -u)" -ne 0 ]; then
    echo -e "${RED}${BOLD}=>${RESET}${BOLD} Please run as root${RESET}"
    exit 1
fi
fallback() {
    echo -e "${RED}${BOLD}=>${RESET}${BOLD}An error occurred. Cleaning up...${RESET}"
    umount -R "$ROOTPATH" || echo -e "${RED}${BOLD}=>${RESET}${BOLD}Failed to unmount $ROOTPATH.${RESET}"
    exit 1
}
checkmount() {
    if mount | grep "on $1/root.x86_64" > /dev/null 2>&1; then
	umount -R "$1/root.x86_64"
else
    echo -e "${YELLOW}${BOLD}=> ${RESET}${BOLD}$2 is not mounted${RESET}"
fi
}
handleempty() {
       if [ -z "$2" ]; then
        echo -e "${RED}${BOLD}=>${RESET}${BOLD} Please put the container name${RESET}"
        exit 1
    fi
}
if [ "$1" = "create" ]; then
    if [ -z "$2" ]; then
        echo -e "${RED}${BOLD}=>${RESET}${BOLD} Please give this Container a name with ${RESET}${UNDERLINE}arcabox create <name>${RESET}"
        exit 1
    fi
    CONTAINER_NAME=$(echo "$2" | tr -cd '[:alnum:]-_')
    TARGET_DIR="/usr/share/arcabox/containers/$CONTAINER_NAME"
    if [ -d "$TARGET_DIR" ]; then
        echo -e "${RED}${BOLD}=>${RESET}${BOLD} $2 already exists${RESET}"
        exit
    fi
    mkdir -p "$TARGET_DIR"
    echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Created ${RESET}${UNDERLINE}$TARGET_DIR${RESET}"

    echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Downloading the Tarball...${RESET}"
    curl -o "$TARGET_DIR"/archlinux-bootstrap-x86_64.tar.zst https://geo.mirror.pkgbuild.com/iso/latest/archlinux-bootstrap-x86_64.tar.zst --progress-bar || fallback

    echo -e "${BOLD}${GREEN}=>${RESET}${BOLD}Extracting the Tarball...${RESET}"
    tar -xvf "$TARGET_DIR"/archlinux-bootstrap-x86_64.tar.zst -C "$TARGET_DIR" --numeric-owner || fallback

    echo -e "${GREEN}=> ${BOLD}${RESET}${BOLD}Cleaning up...${RESET}"
    rm -rvf "$TARGET_DIR"/archlinux-bootstrap-x86_64.tar.zst "$TARGET_DIR"/pkglist.x86_64.txt
    ROOTPATH="$TARGET_DIR/root.x86_64" 
    CHROOTPROG="$ROOTPATH/bin/arch-chroot"

    echo -e "${BOLD}${YELLOW}=> ${RESET}${BOLD}Preparing for Setup...${RESET}"

    mount --bind "$ROOTPATH" "$ROOTPATH" || fallback

    echo -e "${BOLD}${YELLOW}=> ${RESET}${BOLD}Configuring the system${RESET}"

    cat << EOF > "$ROOTPATH/setup.sh"
    #!/bin/bash 
    pacman-key --init
    pacman-key --populate
    echo "PS1='(arcabox)[\\u@\\h \\W]\\$ '" >> ~/.bashrc
    exit
EOF

    chmod +x "$ROOTPATH/setup.sh"

    # Run the setup.sh script inside the chroot
    "$CHROOTPROG" "$ROOTPATH" bash /setup.sh || fallback

    "$CHROOTPROG" "$ROOTPATH" rm /setup.sh
    echo -e "${YELLOW}${BOLD}=> ${RESET}${BOLD}Setting up Pacman Mirrorlist${RESET}"
    echo "Server = https://geo.mirror.pkgbuild.com/\$repo/os/\$arch" >> "$ROOTPATH/etc/pacman.d/mirrorlist"

    echo -e "${BOLD}${GREEN}=> ${RESET}${BOLD}Running pacman -Syu in $2...${RESET}"
    "$CHROOTPROG" "$ROOTPATH" pacman --noconfirm -Syu || fallback


    echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Finishing up${RESET}"
    umount "$ROOTPATH" || echo "Failed to unmount $ROOTPATH."
elif [ "$1" = "open" ]; then
    if [ -z "$2" ]; then
        echo -e "${BOLD}${RED}=> ${RESET}${BOLD}Please provide the container name.${RESET}"
        exit 1
    fi

    ROOTPATH="/usr/share/arcabox/containers/$2/root.x86_64"

    if [ ! -d "$ROOTPATH" ]; then
        echo -e "${BOLD}${RED}=> ${RESET}${BOLD}$2 Does not exist. ${RESET}"
        exit 1
    fi

    mount --bind "$ROOTPATH" "$ROOTPATH" || fallback

    "$ROOTPATH/bin/arch-chroot" "$ROOTPATH" || fallback

    echo -e "${BOLD}${GREEN}=>${RESET}${BOLD}Successfully exited $2.${RESET}"
    umount "$ROOTPATH"
elif [ "$1" = "help" ]; then
	ARCAVERSION="1.4"
	echo -e "Arcabox version ${UNDERLINE}$ARCAVERSION${RESET}"
	echo "Arcabox is a tool to create Arch Linux cointainers"
	echo "Usage: arcabox <command> <name>"
	echo "Commands:"
	echo "create			-	Create a new Container"
	echo
	echo "open			-	Open a Container"
	echo
	echo "delete			-	Delete a Container"
	echo
	echo "run <name> <command>	-	Run a command"
	echo
	echo "list			-	List all containers"
    echo
    echo "backup        -   Backup a container"
    echo
    echo "restore       -   Restore a container"
    echo
    echo "clone <src> <dest>    -   Clone a container"
    echo
    echo "update        -   Update a container"
    echo
    echo "Licensed with GNU GPL version 3"

elif [ "$1" = "delete" ]; then
    handleempty "$@"
	ROOTPATH="/usr/share/arcabox/containers/$2"
	if [ -d "$ROOTPATH" ]; then
		echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Found $2${RESET}"
	else
		echo -e "${RED}${BOLD}=> ${RESET}${BOLD}Unknown Container: $2${RESET}"
        exit
	fi


if mount | grep "on $ROOTPATH/root.x86_64" > /dev/null 2>&1; then
	umount -R "$ROOTPATH/root.x86_64"
else
    echo -e "${YELLOW}${BOLD}=> ${RESET}${BOLD}$2 is not mounted${RESET}"
fi
	echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Removing $2...${RESET}"
	rm -rf "$ROOTPATH"
	echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Done!${RESET}"


elif [ "$1" = "run" ]; then
    ROOTPATH="/usr/share/arcabox/containers/$2/root.x86_64"
        handleempty "$@"
    if [ ! -d "$ROOTPATH" ]; then
        echo -e "${BOLD}${RED}=>${RESET}${BOLD} Unable to find $2${RESET}"
        exit 1
    fi
    echo -e "${BOLD}${GREEN}=> ${RESET}${BOLD}Found $2${RESET}"

    if ! mount --bind "$ROOTPATH" "$ROOTPATH"; then
        echo -e "${BOLD}${RED}=> ${RESET}${BOLD}Failed to mount $2${RESET}"
        exit 1
    fi

	"$ROOTPATH"/bin/arch-chroot "$ROOTPATH" "$3" || echo -e "${BOLD}${RED}=> ${RESET}${BOLD}Unable to run $3 in $2${RESET}"
	umount -R "$ROOTPATH"

    echo -e "${GREEN}${BOLD}=>${RESET}${BOLD} Successfully ran '$3' in $2 ${RESET}"

elif [ "$1" = "list" ]; then
	ls --color=auto /usr/share/arcabox/containers
elif [ "$1" = "backup" ]; then
    ROOTPATH="/usr/share/arcabox/containers/$2"
    handleempty "$@"

    if [ -d "$ROOTPATH" ]; then
        echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Found $2${RESET}"
    else
        echo -e "${RED}${BOLD}=> ${RESET}${BOLD}Unknown Container: $2${RESET}"
        exit 1
    fi

    if ! [ -d "$ROOTPATH/backups" ]; then
        mkdir -p "$ROOTPATH/backups"
    fi

    timestamp=$(date "+%S-%M-%H-%d-%m-%Y")

    checkmount "$ROOTPATH" "$2"

    echo -e "${YELLOW}${BOLD}=> ${RESET}${BOLD}Creating Backup: $timestamp${RESET}"
    tar -cvf "$ROOTPATH/backups/$timestamp.backup.tar.xz" -I "xz" -C "$ROOTPATH" root.x86_64

    echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Backup for $2 completed: $ROOTPATH/backups/$timestamp.backup.tar.xz${RESET}"

elif [ "$1" = "restore" ]; then
    ROOTPATH="/usr/share/arcabox/containers/$2"
    handleempty "$@"

    if [ -d "$ROOTPATH" ]; then
        echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Found $2${RESET}"
    else
        echo -e "${RED}${BOLD}=> ${RESET}${BOLD}Unknown Container: $2${RESET}"
        exit 1
    fi

    echo -e "${YELLOW}${BOLD}=> ${RESET}${BOLD}Listing Backups${RESET}"
    ls "$ROOTPATH/backups"

    read -p "Enter the name of your backup (without .backup.tar.xz): " backupname

    if [ -f "$ROOTPATH/backups/$backupname.backup.tar.xz" ]; then
        echo -e "${BOLD}${GREEN}=> ${RESET}${BOLD}Found $backupname ${RESET}"
    else
        echo -e "${BOLD}${RED}=> ${RESET}${BOLD}Unknown Backup: $backupname"
        exit 1
    fi

    checkmount "$ROOTPATH" "$2"
    
    echo -e "${YELLOW}${BOLD}=> ${RESET}${BOLD}Cleaning up the container before Restoration${RESET}"
    rm -rf "$ROOTPATH/root.x86_64"

    echo -e "${YELLOW}${BOLD}=> ${RESET}${BOLD}Extracting the Backup${RESET}"
    tar -xvf "$ROOTPATH/backups/$backupname.backup.tar.xz" -C "$ROOTPATH"

    echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Successfully restored $backupname in $2"

elif [ "$1" = "clone" ]; then
    ROOTPATHSRC="/usr/share/arcabox/containers/$2"
    ROOTPATHDEST="/usr/share/arcabox/containers/$3"
    
    handleempty "$@"
    
    if [ -d "$ROOTPATHSRC" ]; then
        echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Found $2${RESET}"
    else
        echo -e "${RED}${BOLD}=> ${RESET}${BOLD}Unknown Container: $2${RESET}"
        exit 1
    fi
    
    if [ -d "$ROOTPATHDEST" ]; then
        echo -e "${RED}${BOLD}=> ${RESET}${BOLD}$3 Already Exists.${RESET}"
        exit 1
    else
        echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}$3 Does not exist. Proceeding to clone.${RESET}"
    fi

    checkmount "$ROOTPATHSRC" "$2"
    
    mkdir -p "$ROOTPATHDEST"
    
    echo -e "${YELLOW}${BOLD}=> ${RESET}${BOLD}Cloning $2 to $3...${RESET}"
    
    cp -r "$ROOTPATHSRC/root.x86_64" "$ROOTPATHDEST/"
    
    echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Clone completed successfully! $2 -> $3${RESET}"
elif [ "$1" = "update" ]; then
    ROOTPATH="/usr/share/arcabox/containers/$2"
    
    handleempty "$@"
    
    if [ -d "$ROOTPATH" ]; then
        echo -e "${GREEN}${BOLD}=> ${RESET}${BOLD}Found $2${RESET}"
    else
        echo -e "${RED}${BOLD}=> ${RESET}${BOLD}Unknown Container: $2${RESET}"
        exit 1
    fi
    checkmount "$ROOTPATH" "$2"
    mount --bind "$ROOTPATH/root.x86_64" "$ROOTPATH/root.x86_64"
    "$ROOTPATH/root.x86_64/bin/arch-chroot" "$ROOTPATH/root.x86_64" "pacman" "-Syu"
else
    echo -e "${RED}${BOLD}=>${RESET}${BOLD} Check 'arcabox help'${RESET}"
    exit 1
fi